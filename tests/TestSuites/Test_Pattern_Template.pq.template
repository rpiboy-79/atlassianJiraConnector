# CORRECTED UNIT TEST PATTERN - NO .PQM MODULE LOADING
# Test files (.query.pq) cannot use Extension.LoadFunction or access .pqm modules

# ==============================================================================
# THE REALITY: TEST FILES ARE ISOLATED
# ==============================================================================

# ❌ DOES NOT WORK in .query.pq files:
# TestHelpers = Extension.LoadFunction("TestHelpers.pqm")  // Error: Extension.* not available

# ✅ DOES WORK: Inline helper functions directly in each test file
# All helper functions must be defined within each test file

# ==============================================================================
# REVISED PATTERN: INLINE HELPERS IN EACH TEST FILE
# ==============================================================================

// Template for Test_[TestName].query.pq files
(parameter) =>
let
    // INLINE HELPER FUNCTIONS (copy these into each test file)

    //fill in test name here
    testName = "<nameHere>",
    // Helper 1: Safely extract issue data from connector output
    GetIssueData = (connectorResult as any) as table =>
        let
            // Navigate to the Issues data with error handling
            IssuesFolder = try connectorResult{[Name="Issues"]}[Data] otherwise #table({},{}),
            FirstProject = try Table.FirstN(IssuesFolder, 1) otherwise #table({},{}),
            IssueData = if Table.RowCount(FirstProject) > 0 then 
                try FirstProject{0}[Data] otherwise #table({},{})
            else 
                #table({},{})
        in
            IssueData,
    
    // Helper 2: Flexible preference based column detection (case-insensitive), i.e. can search for a column based on a list of possible name variations e.g. {"id", "Id", "ID", "Indentifier"}
    FlexibleColumnCheck = (table as table, possibleNames as list) as text =>
        let
            actualColumns = List.Transform(Table.ColumnNames(table), Text.Lower),
            possibleLower = List.Transform(possibleNames, Text.Lower),
            foundColumn = List.First(List.Intersect({possibleLower, actualColumns}), null),
            // Map back to actual column name
            actualColumn = if foundColumn <> null then
                let
                    matchIndex = List.PositionOf(actualColumns, foundColumn)
                in
                    if matchIndex >= 0 then Table.ColumnNames(table){matchIndex} else null
            else
                null
        in
            actualColumn,
    
    // Helper 3: Safe field value extraction
    GetFieldValue = (row as record, fieldName as text) as any =>
        try 
            Record.Field(row, fieldName) 
        catch 
            null,
    
    // ACTUAL TEST LOGIC STARTS HERE
    
    // Step 1: Extract connector data
    ConnectorResult = parameter,
    IssueData = GetIssueData(ConnectorResult),
    
    // Step 2: Validate basic structure
    RowCount = Table.RowCount(IssueData),
    HasData = RowCount > 0,
    HasColumns = Table.ColumnCount(IssueData) > 0,
    ColumnNames = Table.ColumnNames(IssueData),


    // Step 2A: Wrap Test in error handling and no-data handling
    test =
        if HasData and HasColumns then
            try
                let
                    // Step 3: Find key columns flexibly
                    IdColumn = FlexibleColumnCheck(IssueData, {"id", "Id", "ID"}),
                    KeyColumn = FlexibleColumnCheck(IssueData, {"key", "Key", "KEY"}),
                    SummaryColumn = FlexibleColumnCheck(IssueData, {"summary", "Summary", "SUMMARY"}),
                    
                    // Step 4: Content validation
                    ContentValidation = if HasData and IdColumn <> null then
                        let
                            firstRow = IssueData{0},
                            idValue = GetFieldValue(firstRow, IdColumn),
                            keyValue = if KeyColumn <> null then GetFieldValue(firstRow, KeyColumn) else null,
                            summaryValue = if SummaryColumn <> null then GetFieldValue(firstRow, SummaryColumn) else null
                        in
                            [
                                IdExists = IdColumn <> null,
                                KeyExists = KeyColumn <> null,
                                SummaryExists = SummaryColumn <> null,
                                IdHasValue = idValue <> null,
                                KeyHasValue = keyValue <> null,
                                SummaryHasValue = summaryValue <> null,
                                SampleValues = [
                                    Id = idValue,
                                    Key = keyValue, 
                                    Summary = summaryValue
                                ]
                            ]
                    else
                        [
                            IdExists = false,
                            KeyExists = false,
                            SummaryExists = false,
                            IdHasValue = false,
                            KeyHasValue = false,
                            SummaryHasValue = false,
                            SampleValues = null
                        ],
                    
                    // Step 5: Overall test result
                    TestPassed = HasData and HasColumns and ContentValidation[IdExists] 
                                and ContentValidation[IdHasValue],
                    
                    // Step 6: Structured result
                    Results = [
                        TestName = "Basic Data Validation",
                        Passed = TestPassed,
                        RowCount = Table.RowCount(IssueData),
                        ColumnCount = Table.ColumnCount(IssueData),
                        FoundColumns = [
                            Id = IdColumn,
                            Key = KeyColumn,
                            Summary = SummaryColumn
                        ],
                        ContentValidation = ContentValidation,
                        AllColumns = Table.ColumnNames(IssueData),
                        SampleRow = if HasData then IssueData{0} else null
                    ]
                in
                    Results
            otherwise
                #table(
                    {"Test", "Result", "Details"},
                    {
                        {
                            testName,
                            "Error",
                            "An error occurred during analysis."
                        }
                   }
                )
        else
            #table(
                {"Test", "Result", "Details"},
                {
                    {
                        testName,
                        "n/a",
                        "There is no data to analyze."
                    }
                }
            )
in
    test
    


# ==============================================================================
# TEMPLATE VARIATIONS FOR DIFFERENT TEST TYPES
# ==============================================================================

# Variation 1: Column Structure Test
// Test_ColumnStructure.query.pq
(parameter) =>
let
    // ... include all helper functions here ...
    
    IssueData = GetIssueData(parameter),
    ActualColumns = Table.ColumnNames(IssueData),
    ExpectedColumns = {"id", "key", "summary", "created"}, // adjust as needed
    
    // Case-insensitive comparison
    ActualLower = List.Transform(ActualColumns, Text.Lower),
    ExpectedLower = List.Transform(ExpectedColumns, Text.Lower),
    
    MissingColumns = List.Difference(ExpectedLower, ActualLower),
    ExtraColumns = List.Difference(ActualLower, ExpectedLower),
    
    TestResult = [
        TestName = "Column Structure Validation",
        Passed = List.Count(MissingColumns) = 0,
        ActualColumns = ActualColumns,
        MissingColumns = MissingColumns,
        ExtraColumns = ExtraColumns,
        TotalColumns = List.Count(ActualColumns)
    ]
in
    TestResult,

# Variation 2: Data Content Test
// Test_DataContent.query.pq
(parameter) =>
let
    // ... include all helper functions here ...
    
    IssueData = GetIssueData(parameter),
    SampleSize = Number.Min(Table.RowCount(IssueData), 5),
    SampleData = Table.FirstN(IssueData, SampleSize),
    
    // Test for non-null values in key columns
    IdColumn = FlexibleColumnCheck(IssueData, {"id"}),
    NonNullIds = if IdColumn <> null then
        List.Count(List.RemoveNulls(Table.Column(SampleData, IdColumn)))
    else 0,
    
    TestResult = [
        TestName = "Data Content Validation",
        Passed = NonNullIds > 0,
        SampleSize = SampleSize,
        NonNullIdCount = NonNullIds,
        SampleData = SampleData
    ]
in
    TestResult